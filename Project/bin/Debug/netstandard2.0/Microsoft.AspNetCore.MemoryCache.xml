<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FastCore</name>
    </assembly>
    <members>
        <member name="T:FastCore.Cache.DataCache`1">
            <summary>
            高速数据缓存，用于缓存高频使用的内存数据流等。
            只能缓存实现了IDisposable接口的对象，以保证缓冲池销毁的时候能成功销毁被缓存的对象。
            </summary>
        </member>
        <member name="F:FastCore.Cache.DataCache`1._errMsg">
            <summary>错误消息</summary>
        </member>
        <member name="F:FastCore.Cache.DataCache`1._actSlots">
            <summary>活动插槽</summary>
        </member>
        <member name="F:FastCore.Cache.DataCache`1._bakStores">
            <summary>后备存储</summary>
        </member>
        <member name="F:FastCore.Cache.DataCache`1._useItems">
            <summary>当前使用中项目</summary>
        </member>
        <member name="F:FastCore.Cache.DataCache`1._actItem">
            <summary>当前活动的项目</summary>
        </member>
        <member name="M:FastCore.Cache.DataCache`1.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:FastCore.Cache.DataCache`1.Finalize">
            <summary>
            卸载资源。
            这个析构函数只有在Dispose方法没有被调用时才会运行。
            </summary>
        </member>
        <member name="M:FastCore.Cache.DataCache`1.Dispose">
            <summary>
            销毁。不要使此方法为虚方法。不应让派生类能重写此方法。
            </summary>
        </member>
        <member name="M:FastCore.Cache.DataCache`1.Dispose(System.Boolean)">
            <summary>
            在两个不同的场景中执行Dispose(bool Dispose)。
            如果dispose = true，则该方法已被用户代码直接或间接调用。可以释放托管和非托管资源(Managed and unmanaged resources)。
            如果dispose = false，则运行时已从终结器(finalizer,即析构函数)内部调用该方法，您不应再引用其他对象，只能释放非托管资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FastCore.Cache.DataCache`1.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:FastCore.Cache.DataCache`1.Get">
            <summary>
            取出一个空闲的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastCore.Cache.DataCache`1.Put(`0)">
            <summary>将对象归还回缓存</summary>
            <param name="value"></param>
        </member>
        <member name="T:FastCore.Cache.DataCache`1.CacheItem">
            <summary>
            缓存项目，与ObjectCache不一样，这里用结构实现CacheItem，
            因为结构存储在堆栈上，可以避免被垃圾回收器清理掉。
            </summary>
        </member>
        <member name="F:FastCore.Cache.DataCache`1.CacheItem.Value">
            <summary>
            缓存值
            </summary>
        </member>
        <member name="T:FastCore.Cache.CacheClearPolicy">
            <summary>
            缓存清理策略
            </summary>
        </member>
        <member name="F:FastCore.Cache.CacheClearPolicy.ClearAll">
            <summary>
            清理所有可能的缓存项目
            </summary>
        </member>
        <member name="F:FastCore.Cache.CacheClearPolicy.OnlyExpired">
            <summary>
            仅清理已经过期的缓存项目
            </summary>
        </member>
        <member name="T:FastCore.Cache.MemoryCache">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="F:FastCore.Cache.MemoryCache._cache">
            <summary>并行缓存字典，适用于多线程高并发</summary>
        </member>
        <member name="F:FastCore.Cache.MemoryCache._jsonSerialize">
            <summary>是否启用Json序列化</summary>
        </member>
        <member name="F:FastCore.Cache.MemoryCache._autoClearCache">
            <summary>是否自动清理缓存</summary>
        </member>
        <member name="F:FastCore.Cache.MemoryCache._clearInterval">
            <summary>清理间隔时间，以秒为单位，默认60秒清理一次</summary>
        </member>
        <member name="F:FastCore.Cache.MemoryCache._clearCapacity">
            <summary>清理容量，默认为0表示每次都要清理整个缓存中的过期项目</summary>
        </member>
        <member name="F:FastCore.Cache.MemoryCache._cancelToken">
            <summary>取消清理令牌</summary>
        </member>
        <member name="F:FastCore.Cache.MemoryCache._count">
            <summary>缓存项目数量</summary>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            实例化缓存
            </summary>
            <param name="autoClearCache">是否启用自动清理缓存，默认开启</param>
            <param name="clearInterval">清理间隔时间，以秒为单位，默认60秒清理一次</param>
            <param name="clearCapacity">清理容量，默认为0表示每次都要清理整个缓存中的过期项目</param>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Finalize">
            <summary>
            卸载资源。
            这个析构函数只有在Dispose方法没有被调用时才会运行。
            </summary>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Dispose">
            <summary>
            销毁。不要使此方法为虚方法。不应让派生类能重写此方法。
            </summary>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Dispose(System.Boolean)">
            <summary>
            在两个不同的场景中执行Dispose(bool Dispose)。
            如果dispose = true，则该方法已被用户代码直接或间接调用。可以释放托管和非托管资源(Managed and unmanaged resources)。
            如果dispose = false，则运行时已从终结器(finalizer,即析构函数)内部调用该方法，您不应再引用其他对象，只能释放非托管资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.Name">
            <summary>
            缓存名称
            </summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.Policy">
            <summary>
            缓存清理策略
            </summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.Interval">
            <summary>清理间隔，以秒为单位，默认60秒，表示每隔60秒清理一次缓存</summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.Capacity">
            <summary>
            清理容量，默认为0表示每次都要清理整个缓存中的过期项目，>0表示每次找出指定容量的过期缓存进行清理(能减少扫描整个缓存的频率)。
            </summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.Count">
            <summary>返回缓存项目数量</summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.Keys">
            <summary>返回所有键。实际返回所有Key的集合，数据量较大时注意性能</summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.JsonSerialize">
            <summary>
            是否启用Json序列化，默认开启。
            当启用Json序列化时对性能会有所损耗，经过测试对性能影响不是很大。
            开启Json序列化用来缓存对象特别有用，由于序列化会把对象转换成字符串存储，因此即使被缓存对象被销毁了也能找回。
            </summary>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.ContainsKey(System.String)">
            <summary>是否包含缓存项</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Add``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>增加缓存项目</summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="ttl">项目的存活时间，以秒为单位。默认-1表示永不过期。</param>
            <param name="replace">当项目已经存在时是否替换。如果设置成false，则已存在时不替换，此时可用于锁争夺</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Update``1(System.String,``0)">
            <summary>修改缓存项目</summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Remove(System.String[])">
            <summary>删除缓存项目，支持批量删除</summary>
            <param name="keys">键集合</param>
            <returns>实际删除的缓存项目个数</returns>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Get``1(System.String)">
            <summary>获取缓存项，不存在时返回默认值</summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.Clear">
            <summary>
            清空所有缓存项目
            </summary>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.SetTTL(System.String,System.Int32)">
            <summary>设置缓存项目的存活时间</summary>
            <param name="key">键</param>
            <param name="ttl">存活时间(Time to live)，以秒为单位，-1表示永不过期</param>
            <returns>设置是否成功</returns>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.GetTTL(System.String)">
            <summary>获取缓存项目剩余的存活时间(Time to live)，以秒为单位，-1表示永不过期</summary>
            <param name="key">键</param>
            <returns>缓存项目不存在或已经过期时返回0</returns>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.CreateClearTask">
            <summary>创建清理缓存任务</summary>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.ClearCacheItem(FastCore.Cache.CacheClearPolicy)">
            <summary>
            清理缓存项目。
            </summary>
        </member>
        <member name="T:FastCore.Cache.MemoryCache.CacheItem">
            <summary>
            缓存项目
            </summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.CacheItem.Value">
            <summary>
            项目值
            </summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.CacheItem.TTL">
            <summary>
            存活时间(Time To Live)，以秒为单位，-1表示永不过期
            </summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.CacheItem.Expire">
            <summary>
            到期时间(Expire Time)，以纳秒为单位
            </summary>
        </member>
        <member name="P:FastCore.Cache.MemoryCache.CacheItem.Alive">
            <summary>
            活跃时间(Alive Time)，以纳秒为单位
            </summary>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.CacheItem.#ctor(System.Object,System.Int32)">
            <summary>构造缓存项目</summary>
            <param name="value"></param>
            <param name="ttl"></param>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.CacheItem.Set(System.Object,System.Int32)">
            <summary>设置项目的值和存活时间</summary>
            <param name="value"></param>
            <param name="ttl"></param>
        </member>
        <member name="M:FastCore.Cache.MemoryCache.CacheItem.Set(System.Int32)">
            <summary>设置项目的存活时间</summary>
            <param name="ttl"></param>
        </member>
        <member name="T:FastCore.Cache.ObjectCache`1">
            <summary>
            对象缓存，用于缓存数据库连接、网络连接等。
            只能缓存实现了IDisposable接口的对象，以保证缓冲池销毁的时候能成功销毁被缓存的对象。
            </summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._errMsg">
            <summary>错误消息</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._freeCount">
            <summary>空闲对象数量(最低水位线以上)</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._busyCount">
            <summary>繁忙对象数量</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._maxCount">
            <summary>最大可缓存对象数量(最高水位线)。默认163，0表示无上限</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._minCount">
            <summary>最小可缓存对象数量(最低水位线)。默认3</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._Interval">
            <summary>缓存清理间隔，以秒为单位。最低水位线之上的资源超过空闲时间时被自动清理，默认30s, 0表示永不清理</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._cancelToken">
            <summary>取消清理令牌</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._baseItems">
            <summary>基础缓存项目(最常使用的项目用堆栈缓存, 后进先出)</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._freeItems">
            <summary>空闲缓存项目(空闲使用的项目用队列缓存, 先进先出)</summary>
        </member>
        <member name="F:FastCore.Cache.ObjectCache`1._busyItems">
            <summary>繁忙缓存项目</summary>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.Finalize">
            <summary>
            卸载资源。
            这个析构函数只有在Dispose方法没有被调用时才会运行。
            </summary>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.Dispose">
            <summary>
            销毁。不要使此方法为虚方法。不应让派生类能重写此方法。
            </summary>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.Dispose(System.Boolean)">
            <summary>
            在两个不同的场景中执行Dispose(bool Dispose)。
            如果dispose = true，则该方法已被用户代码直接或间接调用。可以释放托管和非托管资源(Managed and unmanaged resources)。
            如果dispose = false，则运行时已从终结器(finalizer,即析构函数)内部调用该方法，您不应再引用其他对象，只能释放非托管资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.FreeCount">
            <summary>
            空闲对象数量
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.BusyCount">
            <summary>
            繁忙对象数量
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.MaxCount">
            <summary>
            最大可缓存对象数量。默认100，0表示无上限
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.MinCount">
            <summary>
            最小可缓存对象数量(最低水位线)。默认3
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.Interval">
            <summary>
            缓存清理间隔，以秒为单位，默认30s, 0表示永不清理。
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.Get(System.Int32)">
            <summary>
            取出一个空闲的对象
            </summary>
            <param name="ttl">存活时间，以秒为单位，默认10秒(超过以后还不归还，缓存清理时会被自动回收)，-1表示一直占用(缓存清理时不进行自动回收)</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.Put(`0)">
            <summary>将对象归还回缓存</summary>
            <param name="value"></param>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.CreateClearTask">
            <summary>创建清理缓存任务</summary>
        </member>
        <member name="M:FastCore.Cache.ObjectCache`1.ClearCacheItem">
            <summary>
            清理缓存项目。
            </summary>
        </member>
        <member name="T:FastCore.Cache.ObjectCache`1.CacheItem">
            <summary>
            缓存项目
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.CacheItem.Value">
            <summary>
            缓存值
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.CacheItem.TTL">
            <summary>
            存活时间，以秒为单位，默认10秒，-1表示一直占用
            </summary>
        </member>
        <member name="P:FastCore.Cache.ObjectCache`1.CacheItem.LastTime">
            <summary>
            最近访问时间
            </summary>
        </member>
        <member name="T:FastCore.Json.Json">
            <summary>
            Json解析
            </summary>
        </member>
        <member name="P:FastCore.Json.Json.Errors">
            <summary>
            返回解析错误信息
            </summary>
        </member>
        <member name="M:FastCore.Json.Json.Parse(System.String,System.Boolean@)">
            <summary>
            解析字符串并创建JSON对象
            </summary>
            <param name="str">待解析的json字符串</param>
            <param name="ok">是否解析成功</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.ParseObject(System.String@,System.Int32@)">
            <summary>
            解析键值(parse key-value), 返回由键值对字典
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.ParseValue(System.String@,System.Int32@)">
            <summary>
            解析 string / number / object / array / true / false / null
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.ParseString(System.String@,System.Int32@)">
            <summary>
            解析字符串(parse string)
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.ParseNumber(System.String@,System.Int32@)">
            <summary>
            解析数字(parse number)
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.ParseBoolean(System.String@,System.Int32@)">
            <summary>
            解析布尔值(parse true/false)
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.ParseNull(System.String@,System.Int32@)">
            <summary>
            解析空值(parse null)
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.ParseKey(System.String@,System.Int32@)">
            <summary>
            解析Key
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Json.Json.SkipChar(System.String@,System.Int32@)">
            <summary>
            跳过特殊字符。
            说明：以后将其改造字典，标记字符的每个特殊位置形成映射，这样能大幅提升解析性能。
            </summary>
            <param name="str"></param>
            <param name="index"></param>
        </member>
        <member name="M:FastCore.Json.Json.Str2U(System.String)">
            <summary>
            字符串转Unicode
            </summary>
            <param name="text">字符串</param>
            <returns>Unicode编码后的字符串</returns>
        </member>
        <member name="M:FastCore.Json.Json.U2Str(System.String)">
            <summary>  
            Unicode字符串转为正常字符串  
            </summary>  
            <param name="text"></param>  
            <returns></returns>  
        </member>
        <member name="T:FastCore.Redis.Redis">
            <summary>
            Redis工厂，创建Redis客户端、集群等
            </summary>
        </member>
        <member name="P:FastCore.Redis.Redis.Instance">
            <summary>
            取得Redis客户端实例
            </summary>
        </member>
        <member name="M:FastCore.Redis.Redis.#ctor">
            <summary>
            私有构造函数，防止实例化
            </summary>
        </member>
        <member name="M:FastCore.Redis.Redis.Finalize">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:FastCore.Redis.Redis.Create(System.String,System.Int32,System.Int32)">
            <summary>
            创建RedisClient
            </summary>
            <param name="server">服务器，默认为127.0.0.1</param>
            <param name="port">端口，默认为6379</param>
            <param name="db">数据库，默认为0，Redis默认内置了0-15个数据库</param>
            <returns>RedisClient对象</returns>
        </member>
        <member name="M:FastCore.Redis.Redis.Create(System.String,System.Int32,System.String,System.Int32)">
            <summary>创建RedisClient</summary>
            <param name="server">服务器，默认为127.0.0.1</param>
            <param name="port">端口，默认为6379</param>
            <param name="password">密码，默认为空</param>
            <param name="db">数据库，默认为0，Redis默认内置了0-15个数据库</param>
            <returns>RedisClient对象</returns>
        </member>
        <member name="M:FastCore.Redis.Redis.Create(FastCore.Redis.RedisOption)">
            <summary>
            创建RedisClient
            </summary>
            <param name="option">配置</param>
            <returns></returns>
        </member>
        <member name="T:FastCore.Redis.RedisClient">
            <summary>
            Redis客户端。
            各种Redis命令的实现。
            当设置好命令以后，系统会从连接池中取出一个RedisConnection对象将命令发送给服务器，并从服务器接收数据。
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisClient.#ctor(FastCore.Redis.RedisOption)">
            <summary>
            实例化
            </summary>
            <param name="option">配置</param>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Finalize">
            <summary>
            卸载资源。
            这个析构函数只有在Dispose方法没有被调用时才会运行。
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Dispose">
            <summary>
            销毁。不要使此方法为虚方法。不应让派生类能重写此方法。
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Dispose(System.Boolean)">
            <summary>
            在两个不同的场景中执行Dispose(bool Dispose)。
            如果dispose = true，则该方法已被用户代码直接或间接调用。可以释放托管和非托管资源(Managed and unmanaged resources)。
            如果dispose = false，则运行时已从终结器(finalizer,即析构函数)内部调用该方法，您不应再引用其他对象，只能释放非托管资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FastCore.Redis.RedisClient.IsLogined">
            <summary>是否已登录</summary>
        </member>
        <member name="P:FastCore.Redis.RedisClient.LoginTime">
            <summary>登录时间</summary>
        </member>
        <member name="P:FastCore.Redis.RedisClient.Error">
            <summary>执行错误，跟踪命令执行时引发的错误</summary>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Close">
            <summary>
            关闭客户端
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Ping">
            <summary>Ping服务器</summary>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Quit">
            <summary>切断服务器连接</summary>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Select(System.Int32)">
            <summary>切换Db，下一次执行命令时生效</summary>
            <param name="db">数据库，Redis默认内置0-15个数据库</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Set``1(System.String,``0,System.Int32)">
            <summary>设置单个Key</summary>
            <typeparam name="T">设置的类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="ttl">存活时间，秒。-1表示永不过期</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Set``1(System.Collections.Generic.IDictionary{System.String,``0},System.Int32)">
            <summary>设置多个Key</summary>
            <typeparam name="T">设置的类型</typeparam>
            <param name="values">字典</param>
            <param name="ttl">存活时间，秒。-1表示永不过期</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Get``1(System.String)">
            <summary>
            根据Key获取对象
            </summary>
            <typeparam name="T">返回的类型</typeparam>
            <param name="key">键</param>
            <returns>成功返回T的实例，失败返回T的默认值</returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Get``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据Key批量获取对象
            </summary>
            <typeparam name="T">返回的类型</typeparam>
            <param name="keys">键</param>
            <returns>成功返回T的实例字典，失败返回null</returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.Execute(FastCore.Redis.RedisCommand)">
            <summary>
            执行命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisClient.TryConvertType``1(System.Object)">
            <summary>
            尝试将结果转换成目标类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:FastCore.Redis.RedisClient.RedisConnCache">
            <summary>
            Redis连接缓存
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisClient.Cache">
            <summary>
            取得Redis实例对象
            </summary>
        </member>
        <member name="T:FastCore.Redis.Commands">
            <summary>
            Redis支持的命令
            </summary>
        </member>
        <member name="T:FastCore.Redis.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="F:FastCore.Redis.CommandType.One">
            <summary>
            单条命令
            </summary>
        </member>
        <member name="F:FastCore.Redis.CommandType.Batch">
            <summary>
            批量命令
            </summary>
        </member>
        <member name="F:FastCore.Redis.CommandType.Multiple">
            <summary>
            多条命令
            </summary>
        </member>
        <member name="T:FastCore.Redis.RedisCommand">
            <summary>
            Redis命令
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisCommand.Type">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisCommand.Command">
            <summary>
            命令
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisCommand.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisCommand.Text">
            <summary>
            命令参数文本
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisCommand.#ctor(System.Byte[],System.Object[])">
            <summary>
            单条命令，命令格式：
            命令 Key Value [Key1 Value1 Key2 Value2 ...]
            示例：
            SET key1 "Hello"
            MSET key1 "Hello" key2 "World" key3 "China"
            </summary>
            <param name="cmd">命令</param>
            <param name="args">Key,Value</param>
        </member>
        <member name="M:FastCore.Redis.RedisCommand.#ctor(System.Byte[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            批量命令，命令格式：
            命令A Key Value 
            命令A Key Value
            ....
            示例：
            SET key1 "Hello"
            SET key2 "World"
            ...
            </summary>
            <param name="cmd">命令</param>
            <param name="args">Key-Value</param>
            <param name="_batch">批量标志，仅占位用，防止new RedisCommand(Commands.Ping, null)这类构造函数报错</param>
        </member>
        <member name="M:FastCore.Redis.RedisCommand.#ctor(System.Collections.Generic.IDictionary{System.Byte[],System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            多条命令，命令格式：
            命令A Key Value [Key1 Value1 Key2 Value2 ...]
            命令B Key Value [Key1 Value1 Key2 Value2 ...]
            命令C Key Value [Key1 Value1 Key2 Value2 ...]
            ....
            示例：
            SET key1 "Hello"
            MSET key1 "Hello" key2 "World"
            GET key1
            ...
            </summary>
            <param name="cmdargs">命令-Key-Value</param>
        </member>
        <member name="T:FastCore.Redis.RedisConnection">
            <summary>
            Redis连接。
            仅用于将命令打包发送给服务器，从服务器接收返回数据，不要增加其它功能。
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Finalize">
            <summary>
            卸载资源。
            这个析构函数只有在Dispose方法没有被调用时才会运行。
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Dispose">
            <summary>
            销毁。不要使此方法为虚方法。不应让派生类能重写此方法。
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Dispose(System.Boolean)">
            <summary>
            在两个不同的场景中执行Dispose(bool Dispose)。
            如果dispose = true，则该方法已被用户代码直接或间接调用。可以释放托管和非托管资源(Managed and unmanaged resources)。
            如果dispose = false，则运行时已从终结器(finalizer,即析构函数)内部调用该方法，您不应再引用其他对象，只能释放非托管资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.IsConnected">
            <summary>
            是否已连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Initialize(FastCore.Redis.RedisOption)">
            <summary>
            初始化连接
            </summary>
            <param name="option">配置</param>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Execute(FastCore.Redis.RedisCommand)">
            <summary>执行命令</summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Send(System.Net.Sockets.NetworkStream,FastCore.Redis.RedisCommand)">
            <summary>
            发送单条命令给服务器，包的格式是：
            命令 Key Value | Key Value Key Value ...
            </summary>
            <param name="ns"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Receive(System.Net.Sockets.NetworkStream,System.Int32)">
            <summary>
            从服务器接收响应
            </summary>
            <param name="ns"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Connect">
            <summary>
            连接到Redis服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.Clear">
            <summary>
            尝试清理掉历史残留数据
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.ReadLine(System.IO.Stream)">
            <summary>
            读取一行
            </summary>
            <param name="bs"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.ReadBlock(System.IO.Stream)">
            <summary>
            读取一个大容量字符串(Bulk Strings)
            </summary>
            <param name="bs"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.ReadBlocks(System.IO.Stream)">
            <summary>
            读取一个数组(Arrays)
            说明：按照官方文档数组中的元素可以是混合的RESP类型，但根据官方文档对客户端-服务器的交互方式，应该总是：客户端向Redis服务器发送一个由大容量字符串组成的RESP数组。
                 因此这里读取数组时只读取数组中的BulkStrings和嵌套的数组中数据。
            参考：https://redis.io/topics/protocol (RESP protocol description 和 Sending commands to a Redis Server)
            </summary>
            <param name="bs"></param>
            <returns></returns>
        </member>
        <member name="T:FastCore.Redis.RedisConnection.RedisMemoryStreamCache">
            <summary>
            Redis内存流缓存池
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisConnection.RedisMemoryStreamCache.Capacity">
            <summary>缓存容量, 以字节为单位。默认1024字节</summary>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.RedisMemoryStreamCache.Get">
            <summary>
            重写Get
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastCore.Redis.RedisConnection.RedisMemoryStreamCache.Put(System.IO.MemoryStream)">
            <summary>
            重写Put
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:FastCore.Redis.RedisConnection.Cache">
            <summary>
            取得实例对象
            </summary>
        </member>
        <member name="T:FastCore.Redis.RedisError">
            <summary>
            Redis错误
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisError.Time">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisError.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisError.Source">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisError.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisError.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisError.ToString">
            <summary>
            显示完整的错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastCore.Redis.RedisServerException">
            <summary>
            Redis服务器异常
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisServerException.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisServerException.#ctor(System.String,System.Exception)">
            <summary>
            实例化
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:FastCore.Redis.RedisServerException.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:FastCore.Redis.RedisServerException.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisServerException.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="T:FastCore.Redis.RedisClientException">
            <summary>
            Redis客户端异常
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisClientException.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:FastCore.Redis.RedisClientException.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FastCore.Redis.RedisClientException.#ctor(System.String,System.Exception)">
            <summary>
            实例化
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:FastCore.Redis.RedisClientException.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化
            </summary>
            <param name="message">消息</param>
            <param name="source">来源</param>
            <param name="data">数据</param>
        </member>
        <member name="P:FastCore.Redis.RedisClientException.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisClientException.Source">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisClientException.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisClientException.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="T:FastCore.Redis.RedisOption">
            <summary>
            Redis选项配置
            </summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.Server">
            <summary>服务器，例如：127.0.0.1</summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.Port">
            <summary>端口，例如：6379</summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.Password">
            <summary>密码</summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.Db">
            <summary>数据库，默认0。Redis默认内建0-15个数据库</summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.ConnectTimeout">
            <summary>连接超时时间，以毫秒为单位。默认5000ms</summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.SendTimeout">
            <summary>发送数据超时时间，以毫秒为单位。默认3000ms</summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.ReceiveTimeout">
            <summary>接收数据超时时间，以毫秒为单位。默认3000ms</summary>
        </member>
        <member name="P:FastCore.Redis.RedisOption.RetryCount">
            <summary>出错时重试次数，默认3次</summary>
        </member>
        <member name="T:FastCore.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            
            Courtesy of @JonSkeet
            http://www.yoda.arachsys.com/csharp/DoubleConverter.cs
            </summary>
        </member>
        <member name="M:FastCore.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:FastCore.DoubleConverter.ArbitraryDecimal">
            <summary>
            Private class used for manipulating
            </summary>
        </member>
        <member name="F:FastCore.DoubleConverter.ArbitraryDecimal.digits">
            <summary>
            Digits in the decimal expansion, one byte per digit 
            </summary>
        </member>
        <member name="F:FastCore.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:FastCore.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:FastCore.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:FastCore.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:FastCore.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:FastCore.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:FastCore.ObjectCheck">
            <summary>
            各种对象校验
            </summary>
        </member>
        <member name="M:FastCore.ObjectCheck.IsInteger(System.Object)">
            <summary>
            是否为整型
            </summary>
            <param name="value">要判定的值</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectCheck.IsNumeric(System.Object)">
            <summary>
            是否为数字
            </summary>
            <param name="value">要判定的值</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectCheck.IsDate(System.Object)">
            <summary>
            是否为日期
            </summary>
            <param name="value">要判定的值</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectCheck.IsEmpty(System.String)">
            <summary>判断字符串是否为String.Empty</summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectCheck.IsNullOrEmpty(System.String)">
            <summary>判断字符串是否为null或String.Empty</summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectCheck.IsNullOrWhiteSpace(System.String)">
            <summary>字符串是否空或者空白字符串</summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="T:FastCore.ObjectConvert">
            <summary>
            对象转换
            </summary>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bool(System.Object)">
            <summary>
            将object转换成bool(System.Boolean)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2SByte(System.Object)">
            <summary>
            将object转换成sbyte(System.SByte)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Byte(System.Object)">
            <summary>
            将object转换成sbyte(System.Byte)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Short(System.Object)">
            <summary>
            将object转换成short(System.Int16)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2UShort(System.Object)">
            <summary>
            将object转换成ushort(System.UInt16)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Int(System.Object)">
            <summary>
            将object转换成int(System.Int32)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2UInt(System.Object)">
            <summary>
            将object转换成uint(System.UInt32)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Lng(System.Object)">
            <summary>
            将object转换成long(System.Int64)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2ULng(System.Object)">
            <summary>
            将object转换成long(System.UInt64)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dbl(System.Object)">
            <summary>
            将object转换成double(System.Double)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Flt(System.Object)">
            <summary>
            将object转换成float(System.Single)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dec(System.Object)">
            <summary>
            将object转换成decimal(System.Decimal)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Date(System.Object)">
            <summary>
            将object转换成DateTime
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Str(System.Object)">
            <summary>
            将object转换成string(System.String)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Chr(System.Object)">
            <summary>
            将object转换成char(System.Char)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dbs(System.Object)">
            <summary>
            将object转换成数据库非空字符串
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bool(System.String)">
            <summary>
            将string转换成bool(System.Boolean)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2SByte(System.String)">
            <summary>
            将string转换成sbyte(System.SByte)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Byte(System.String)">
            <summary>
            将string转换成byte(System.Byte)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Short(System.String)">
            <summary>
            将string转换成short(System.Int16)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2UShort(System.String)">
            <summary>
            将string转换成ushort(System.UInt16)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Int(System.String)">
            <summary>
            将string转换成int(System.Int32)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2UInt(System.String)">
            <summary>
            将string转换成uint(System.UInt32)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Lng(System.String)">
            <summary>
            将string转换成long(System.Int64)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2ULng(System.String)">
            <summary>
            将string转换成ulong(System.UInt64)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dbl(System.String)">
            <summary>
            将string转换成double(System.Double)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Flt(System.String)">
            <summary>
            将string转换成float(System.Single)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dec(System.String)">
            <summary>
            将string转换成decimal(System.Decimal)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Date(System.String)">
            <summary>
            将string转换成DateTime
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Chr(System.String)">
            <summary>
            将string转换成char(System.Char)
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dbs(System.String)">
            <summary>
            将string转换成数据库非空字符串
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Boolean)">
            <summary>
            将bool(System.Boolean)数值转换成字节数组
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Int16)">
            <summary>
            将short(System.Int16)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.UInt16)">
            <summary>
            将ushort(System.UInt16)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Int32)">
            <summary>
            将int(System.Int32)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.UInt32)">
            <summary>
            将uint(System.UInt32)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Int64)">
            <summary>
            将long(System.Int64)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.UInt64)">
            <summary>
            将ulong(System.UInt64)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Double)">
            <summary>
            将double(System.Double)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Single)">
            <summary>
            将float(System.Single)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Decimal)">
            <summary>
            将decimal(System.Decimal)数值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.DateTime)">
            <summary>
            将DateTime值转换成字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.FastToBytes(System.String)">
            <summary>
            将字符串快速转换成字节
            跳过'安全字符串'的编码过程
            Skip the encoding process for 'safe strings' 
            </summary>
            <param name="strVal"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.String)">
            <summary>
            将string(System.String)转换成字节。
            说明：string转换成字节时会进行UTF8编码。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Object)">
            <summary>
            将object值转换成字节。
            说明：如果value的类型是object，在转换成字节时, 首先序列化成json字符串，再UTF8编码成字节数组。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bool(System.Byte[])">
            <summary>
            将字节数组转换成bool(System.Boolean)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2SByte(System.Byte[])">
            <summary>
            将字节数组转换成sbyte(System.SByte)有符号字节
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Byte(System.Byte[])">
            <summary>
            将字节数组转换成sbyte(System.Byte)无符号字节
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Short(System.Byte[])">
            <summary>
            将字节数组转换成short(System.Int16)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Bytes(System.Byte[])">
            <summary>
            将字节数组转换成ushort(System.UInt16)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Int(System.Byte[])">
            <summary>
            将字节数组转换成int(System.Int32)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2UInt(System.Byte[])">
            <summary>
            将字节数组转换成uint(System.UInt32)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Lng(System.Byte[])">
            <summary>
            将字节数组转换成long(System.Int64)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2ULng(System.Byte[])">
            <summary>
            将字节数组转换成ulong(System.UInt64)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dbl(System.Byte[])">
            <summary>
            将字节数组转换成double(System.Double)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Flt(System.Byte[])">
            <summary>
            将字节数组转换成float(System.Single)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Dec(System.Byte[])">
            <summary>
            将字节数组转换成decimal(System.Decimal)数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Date(System.Byte[])">
            <summary>
            将字节数组转换成DateTime值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Str(System.Byte[])">
            <summary>
            将字节数组转换成字符串string(System.String)
            说明：value必须是已经UTF8编码后的字节数组。
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Chr(System.Byte[])">
            <summary>
            将字节数组转换成char(System.Char)字符
            </summary>
            <param name="value">要转换的值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Obj``1(System.Byte[])">
            <summary>
            将byte[]值转成T。
            说明：value必须是已经序列化成json字符串再UTF8编码后的字节数组。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastCore.ObjectConvert.C2Obj``1(System.String)">
            <summary>
            将string值转成T。
            说明：value必须是已经序列化成json的字符串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:FastCore.TypeConvert">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:FastCore.TypeConvert.C2Type``1(System.Object)">
            <summary>
            将object类型转换成指定的类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">转换的值</param>
            <returns>转换后的目标类型值，转换失败则返回目标类型的默认值</returns>
        </member>
    </members>
</doc>
